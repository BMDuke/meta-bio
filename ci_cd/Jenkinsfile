// Useful resources:
// > https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf
// > https://tutorials.releaseworksacademy.com/learn/building-your-first-docker-image-with-jenkins-2-guide-for-developers
// > https://stackoverflow.com/questions/62958484/how-to-dynamically-add-jenkins-user-and-permissions-inside-docker-container

node {
   
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        
        withEnv(["JENKINS_USER_NAME=${sh(script:'id -un', returnStdout: true).trim()}", "JENKINS_USER_ID=${sh(script:'id -u', returnStdout: true).trim()}", "JENKINS_GROUP_ID=${sh(script:'id -g', returnStdout: true).trim()}"]) { 
             app = docker.build("metadata_api", "--build-arg UID=${env.JENKINS_USER_ID} --build-arg GID=${env.JENKINS_GROUP_ID} --build-arg UNAME=${env.JENKINS_USER_NAME} ./api")
        }
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        withEnv(["JENKINS_USER_NAME=${sh(script:'id -un', returnStdout: true).trim()}", "JENKINS_USER_ID=${sh(script:'id -u', returnStdout: true).trim()}", "JENKINS_GROUP_ID=${sh(script:'id -g', returnStdout: true).trim()}"]) { 
           
           app.withRun("-u ${env.JENKINS_USER_ID}:${env.JENKINS_GROUP_ID}") {c -> 
               sh 'echo "Tests passed"'
               sh 'ls'
               sh 'pwd'
               sh 'cat requirements.txt'
               sh 'pip freeze'
               sh 'python -m pytest'
               sh 'pytest -v --junitxml=results/results.xml'
               sh 'cat results/results.xml'
               sh "docker logs ${c.id}"
           }
               
               
           
        }
        

    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
//         docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
//             app.push("${env.BUILD_NUMBER}")
//             app.push("latest")
        }
}
