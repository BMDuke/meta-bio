// node {

//     checkout scm

//     stage 'Build'
//     def metadata_api_image = docker.build("metadata_api", "./api")


//     stage 'Test'

// //     metadata_api_image.inside('-v ${JENKINS_HOME}/results:/api/results -p 5000:80') { c ->

// //         sh 'pytest -v --junitxml=results/results.xml'

// //     }    
    
//     sh 'docker run -p 1234:80 metadata_api_image pytest'
    
// //     sh 'cat results/results.xml'

//     stage 'Deploy'

    

// }

// }

node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("metadata_api", "./api")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app.inside('-u 1000:50') {
//             sh 'echo "Tests passed"'
            sh 'pytest -v --junitxml=results/results.xml'
            sh 'cat results/results.xml'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
//         docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
//             app.push("${env.BUILD_NUMBER}")
//             app.push("latest")
        }
}
